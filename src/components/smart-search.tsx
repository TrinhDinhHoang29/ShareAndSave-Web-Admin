import aiGenerate from "@/helpers/ai-generate.helper";
import { usePosts } from "@/hooks/react-query-hooks/use-post";
import { PostType } from "@/types/status.type";
import { Send, X } from "lucide-react";
import { useState } from "react";

const getSearchTypeName = (type: PostType): string => {
  switch (type) {
    case PostType.FOUND_ITEM:
      return "ƒê·ªì nh·∫∑t ƒë∆∞·ª£c";
    case PostType.SEEK_LOST_ITEM:
      return "ƒê·ªì b·ªã m·∫•t";
    case PostType.GIVE_AWAY_OLD_ITEM:
      return "ƒê·ªì c≈© cho t·∫∑ng";
    case PostType.OTHER:
      return "Kh√°c";
    default:
      return "T√¨m ki·∫øm";
  }
};

// const buildViT5Prompt = (query: string, topPosts: any[]) => {
//   const topSentences = topPosts
//     .map((p, i) => `B√†i vi·∫øt ${i + 1}: ${p.title} - ${p.description}`)
//     .join("\n");

//   return `Ng∆∞·ªùi d√πng h·ªèi: "${query}"\n\nC√°c b√†i vi·∫øt ph√π h·ª£p:\n${topSentences}\n\nVi·∫øt m·ªôt ƒëo·∫°n ph·∫£n h·ªìi ng·∫Øn, t·ª± nhi√™n, th√¢n thi·ªán (b·∫±ng ti·∫øng Vi·ªát) ƒë·ªÉ tr·∫£ l·ªùi ng∆∞·ªùi d√πng:`;
// };
// const generateNaturalReply = async (prompt: string): Promise<string> => {
//   const res = await fetch("https://openrouter.ai/api/v1/chat/completions", {
//     method: "POST",
//     headers: {
//       Authorization:
//         "Bearer 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",
//       "HTTP-Referer": "https://www.sitename.com",
//       "X-Title": "SiteName",
//       "Content-Type": "application/json",
//     },
//     body: JSON.stringify({
//       model: "deepseek/deepseek-r1:free",
//       messages: [{ role: "user", content: prompt }],
//     }),
//   });

//   const data = await res.json();
//   console.log(data);
//   const markdownText =
//     data.choices?.[0]?.message?.content || "No response received.";
//   return markdownText;
// };

const ChatBotLostAndUsedItems = () => {
  const [query, setQuery] = useState("");
  const [messages, setMessages] = useState<
    Array<{ from: string; text: string }>
  >([]);
  const [loading, setLoading] = useState(false);
  const [searchType, setSearchType] = useState<PostType>(PostType.FOUND_ITEM);
  const [isPopupOpen, setIsPopupOpen] = useState(false);

  const { data } = usePosts({
    limit: 100,
    page: 1,
  });
  const posts = data?.posts || [];

  const getRandomResponse = (type: "found" | "notFound") => {
    const foundResponses = [
      "T√¥i t√¨m th·∫•y m·ªôt s·ªë k·∫øt qu·∫£ ph√π h·ª£p v·ªõi m√¥ t·∫£ c·ªßa b·∫°n:",
      "D·ª±a tr√™n th√¥ng tin b·∫°n cung c·∫•p, ƒë√¢y l√† nh·ªØng b√†i ƒëƒÉng li√™n quan:",
      "C√≥ v·∫ª nh∆∞ nh·ªØng b√†i vi·∫øt sau ƒë√¢y kh·ªõp v·ªõi y√™u c·∫ßu c·ªßa b·∫°n:",
      "T√¥i ƒë√£ t√¨m th·∫•y v√†i th·ª© c√≥ th·ªÉ h·ªØu √≠ch cho b·∫°n:",
      "D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë g·ª£i √Ω c√≥ th·ªÉ ph√π h·ª£p v·ªõi b·∫°n:",
      "Xem th·ª≠ nh·ªØng k·∫øt qu·∫£ d∆∞·ªõi ƒë√¢y, c√≥ th·ªÉ s·∫Ω gi√∫p √≠ch cho b·∫°n:",
      "T√¥i nghƒ© b·∫°n s·∫Ω quan t√¢m ƒë·∫øn nh·ªØng th√¥ng tin sau:",
      "Nh·ªØng b√†i vi·∫øt n√†y c√≥ th·ªÉ li√™n quan ƒë·∫øn th·ª© b·∫°n ƒëang t√¨m:",
      "ƒê√¢y l√† nh·ªØng g√¨ t√¥i t√¨m ƒë∆∞·ª£c d·ª±a tr√™n m√¥ t·∫£ c·ªßa b·∫°n:",
      "M√¨nh c√≥ v√†i g·ª£i √Ω cho b·∫°n, h√£y xem th·ª≠ nh√©:",
      "ƒê√¢y l√† m·ªôt s·ªë b√†i vi·∫øt c√≥ li√™n quan b·∫°n c√≥ th·ªÉ xem qua:",
      "Th√¥ng tin b·∫°n nh·∫≠p v√†o kh√° r√µ, t√¥i t√¨m ƒë∆∞·ª£c v√†i k·∫øt qu·∫£ r·ªìi ƒë√¢y:",
      "C√≥ v·∫ª b·∫°n s·∫Ω quan t√¢m ƒë·∫øn nh·ªØng m·ª•c sau:",
      "D∆∞·ªõi ƒë√¢y l√† nh·ªØng g√¨ t√¥i t√¨m th·∫•y kh·ªõp v·ªõi n·ªôi dung b·∫°n nh·∫≠p:",
      "T√¥i ƒë√£ l·ªçc ƒë∆∞·ª£c v√†i b√†i vi·∫øt ph√π h·ª£p, m·ªùi b·∫°n xem:",
    ];

    const notFoundResponses = [
      "Hi·ªán kh√¥ng c√≥ th√¥ng tin ph√π h·ª£p, b·∫°n c√≥ th·ªÉ th·ª≠ m√¥ t·∫£ chi ti·∫øt h∆°n kh√¥ng?",
      "T√¥i ch∆∞a t√¨m th·∫•y k·∫øt qu·∫£ n√†o ph√π h·ª£p, b·∫°n c√≥ mu·ªën th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c kh√¥ng?",
      "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan. C√≥ th·ªÉ th·ª≠ lo·∫°i b√†i ƒëƒÉng kh√°c?",
      "Hi·ªán ch∆∞a c√≥ b√†i ƒëƒÉng n√†o kh·ªõp v·ªõi y√™u c·∫ßu c·ªßa b·∫°n.",
    ];

    const responses = type === "found" ? foundResponses : notFoundResponses;
    return responses[Math.floor(Math.random() * responses.length)];
  };

  const getSentences = () => {
    return posts.map((post) => `${post.title} - ${post.description}`);
  };

  const handleSend = async () => {
    if (!query.trim()) return;

    setLoading(true);
    const currentQuery = query;

    setMessages((prev) => [...prev, { from: "user", text: currentQuery }]);
    setQuery("");

    try {
      const sentences = getSentences();

      if (sentences.length === 0) {
        setMessages((prev) => [
          ...prev,
          { from: "bot", text: getRandomResponse("notFound") },
        ]);
        return;
      }

      // const response = await fetch(
      //   "https://api-inference.huggingface.co/models/sentence-transformers/all-MiniLM-L6-v2",
      //   {
      //     method: "POST",
      //     headers: {
      //       Authorization: `Bearer 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`,
      //       "Content-Type": "application/json",
      //     },
      //     body: JSON.stringify({
      //       inputs: {
      //         source_sentence: currentQuery,
      //         sentences: sentences,
      //       },
      //       model: "sentence-transformers/all-MiniLM-L6-v2",
      //     }),
      //   }
      // );

      const prompt = `
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI h·ªó tr·ª£ ng∆∞·ªùi d√πng trong vi·ªác t√¨m ki·∫øm ƒë·ªì th·∫•t l·∫°c ho·∫∑c tr·∫£ l·ªùi c√°c c√¢u h·ªèi th√¥ng th∆∞·ªùng.

Ng∆∞·ªùi d√πng v·ª´a nh·∫≠p n·ªôi dung sau: 
"${query}"

D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c b√†i ƒëƒÉng hi·ªán c√≥ (g·ªìm ti√™u ƒë·ªÅ v√† m√¥ t·∫£):
${sentences.map((s, i) => `${i + 1}. ${s}`).join("\n")}

N·∫øu ng∆∞·ªùi d√πng ƒëang t√¨m ki·∫øm m·ªôt m√≥n ƒë·ªì (v√≠ d·ª• nh∆∞ v√≠, ƒëi·ªán tho·∫°i, ch√¨a kh√≥a...), h√£y so s√°nh n·ªôi dung ng∆∞·ªùi d√πng nh·∫≠p v·ªõi c√°c b√†i ƒëƒÉng v√† ƒë∆∞a ra ph·∫£n h·ªìi t·ª± nhi√™n b·∫±ng ti·∫øng Vi·ªát. N·∫øu c√≥ b√†i vi·∫øt ph√π h·ª£p, h√£y n√≥i r√µ **"T√¥i t√¨m th·∫•y m·ªôt s·ªë k·∫øt qu·∫£ ph√π h·ª£p:"** v√† li·ªát k√™ t·ªëi ƒëa 3 k·∫øt qu·∫£ ph√π h·ª£p nh·∫•t. N·∫øu kh√¥ng c√≥ b√†i vi·∫øt ph√π h·ª£p, h√£y n√≥i r√µ l√† **kh√¥ng c√≥ k·∫øt qu·∫£ ph√π h·ª£p** v√† **khuy·∫øn kh√≠ch ng∆∞·ªùi d√πng th·ª≠ l·∫°i v·ªõi th√¥ng tin chi ti·∫øt h∆°n**.
N·∫øu ng∆∞·ªùi d√πng kh√¥ng h·ªèi v·ªÅ vi·ªác t√¨m ƒë·ªì th·∫•t l·∫°c, h√£y ph·∫£n h·ªìi l·∫°i m·ªôt c√°ch **th√¢n thi·ªán, t·ª± nhi√™n, ƒë√∫ng n·ªôi dung c√¢u h·ªèi**, kh√¥ng c·∫ßn tham chi·∫øu ƒë·∫øn danh s√°ch b√†i ƒëƒÉng.

Lu√¥n tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu, v√† ƒë√∫ng tr·ªçng t√¢m.
`;

      const res = await aiGenerate(prompt);
      setMessages((prev) => [...prev, { from: "bot", text: res }]);
      // const scoredPosts = result
      //   .map((score: number, index: number) => ({
      //     ...posts[index],
      //     score,
      //   }))
      //   .sort((a, b) => b.score - a.score);

      // const topPosts = scoredPosts
      //   .slice(0, 3)
      //   .filter((post) => post.score > 0.3);

      // if (topPosts.length > 0) {
      //   const prompt = buildViT5Prompt(currentQuery, topPosts);
      //   const reply = await generateNaturalReply(prompt);

      //   setMessages((prev) => [...prev, { from: "bot", text: reply }]);
      // } else {
      //   setMessages((prev) => [
      //     ...prev,
      //     { from: "bot", text: getRandomResponse("notFound") },
      //   ]);
      // }
    } catch (err) {
      console.error("L·ªói khi g·ªçi API:", err);
      setMessages((prev) => [
        ...prev,
        {
          from: "bot",
          text: "‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu, b·∫°n vui l√≤ng th·ª≠ l·∫°i sau nh√©!",
        },
      ]);
    } finally {
      setLoading(false);
    }
  };

  const togglePopup = () => {
    setIsPopupOpen(!isPopupOpen);
  };

  return (
    <>
      {/* Floating Button */}
      <div className="fixed bottom-20 right-6 z-50" style={{ zIndex: 1000 }}>
        {/* Ping Animation Ring */}
        <div className="absolute inset-0 w-16 h-16 bg-primary rounded-full animate-ping opacity-75"></div>

        {/* Main Button */}
        <button
          onClick={togglePopup}
          className="relative w-16 h-16 bg-gradient-to-r bg-primary text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center"
        >
          {/* Chat Bot Avatar */}
          <div className="w-12 h-12 bg-white rounded-full flex items-center justify-center">
            <div className="text-2xl">ü§ñ</div>
          </div>
        </button>
      </div>

      {/* Popup Chat */}
      {isPopupOpen && (
        <div className="fixed bottom-20 right-6 z-10000 ">
          <div className="bg-white rounded-lg shadow-2xl w-80 h-[500px] flex flex-col border border-gray-200">
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b bg-primary text-white rounded-t-lg">
              <h3 className="text-lg font-semibold">ü§ñ AI T√¨m ƒê·ªì Th·∫•t L·∫°c</h3>
              <button
                onClick={togglePopup}
                className="text-white hover:text-gray-200 transition-colors"
              >
                <X size={20} />
              </button>
            </div>

            {/* Search Type Buttons */}
            {/* <div className="p-3 border-b bg-gray-50">
              <div className="flex flex-wrap gap-2">
                {[
                  PostType.FOUND_ITEM,
                  PostType.SEEK_LOST_ITEM,
                  PostType.GIVE_AWAY_OLD_ITEM,
                ].map((type) => (
                  <button
                    key={type}
                    onClick={() => setSearchType(type)}
                    className={`px-3 py-1 rounded-full text-sm transition-colors ${
                      searchType === type
                        ? "bg-blue-500 text-white"
                        : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                    }`}
                  >
                    {getSearchTypeName(type)}
                  </button>
                ))}
              </div>
            </div> */}

            {/* Messages Area */}
            <div className="flex-1 overflow-y-auto p-4 space-y-3">
              {messages.length === 0 && (
                <div className="text-center text-gray-500 text-sm">
                  üëã Xin ch√†o! H√£y m√¥ t·∫£ ƒë·ªì v·∫≠t b·∫°n c·∫ßn t√¨m
                </div>
              )}
              {messages.map((msg, i) => (
                <div
                  key={i}
                  className={`flex ${
                    msg.from === "user" ? "justify-end" : "justify-start"
                  }`}
                >
                  <div
                    className={`max-w-[80%] px-3 py-2 rounded-lg text-sm ${
                      msg.from === "user"
                        ? "bg-blue-500 text-white rounded-br-none"
                        : "bg-gray-100 text-gray-800 rounded-bl-none"
                    }`}
                    style={{ whiteSpace: "pre-line" }}
                  >
                    {msg.text}
                  </div>
                </div>
              ))}
              {loading && (
                <div className="flex justify-start">
                  <div className="bg-gray-100 px-3 py-2 rounded-lg rounded-bl-none text-sm text-gray-600">
                    <div className="flex items-center space-x-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div
                        className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                        style={{ animationDelay: "0.1s" }}
                      ></div>
                      <div
                        className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                        style={{ animationDelay: "0.2s" }}
                      ></div>
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* Input Area */}
            <div className="p-4 border-t bg-gray-50 rounded-b-lg">
              <div className="flex items-center space-x-2">
                <input
                  type="text"
                  value={query}
                  placeholder="Nh·∫≠p m√¥ t·∫£ ƒë·ªì b·∫°n c·∫ßn t√¨m..."
                  onChange={(e) => setQuery(e.target.value)}
                  onKeyDown={(e) =>
                    e.key === "Enter" && !loading && handleSend()
                  }
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  disabled={loading}
                />
                <button
                  onClick={handleSend}
                  disabled={loading || !query.trim()}
                  className="p-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  <Send size={18} />
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default ChatBotLostAndUsedItems;
